<?xml version="1.0" encoding="UTF-8"?>
<project name="Bearsampp" basedir=".">

  <dirname property="project.basedir" file="${ant.file.bearsampp}"/>
  <property name="build.properties" value="${project.basedir}/build.properties"/>
  <property file="${build.properties}"/>

  <!-- Bearsampp dev -->
  <property name="dev.path" location="${project.basedir}\${dev.dir}"/>
  <fail unless="dev.path" message="Core directory '${dev.path}' not found in ${dev.path}"/>
  <echo message="Bearsampp dev found in ${dev.path}" level="debug"/>

  <!-- Build dir -->
  <property name="build.path" location="${project.basedir}\${build.dir}"/>
  <mkdir dir="${build.path}"/>

  <!-- Import build-commons.xml -->
  <import file="${dev.path}/build/build-commons.xml"/>
  <!-- Import build-release.xml -->
  <import file="${dev.path}/build/build-release.xml"/>

  <property name="release.tmp.path" value="${build.tmp.path}/release"/>
  <mkdir dir="${release.tmp.path}"/>

  <target name="check.lang" description="Check languages files" depends="init, load.lib">
    <divhpdev action="checklang"/>
  </target>

  <target name="release" depends="init, load.lib, build-full, build-basic, build-lite" description="Release Bearsampp"/>

  <target name="base" depends="init, load.lib" unless="is.base.prepared">
    <var name="release.base.target" unset="true"/>
    <property name="release.base.target" value="${release.tmp.path}/base"/>

    <echo message="*** Preparing base"/>
    <echo message="* Name    : ${release.name} "/>
    <echo message="* Version : ${release.fullversion} "/>

    <!-- Clean -->
    <delete dir="${release.base.target}"/>
    <mkdir dir="${release.base.target}"/>

    <!-- Copy core -->
    <copy todir="${release.base.target}">
      <fileset dir="${project.basedir}" defaultexcludes="yes" excludes="
        .dev/**,
        .github/**,
        .idea/**,
        .settings/**,
        giscus.json,
        base/**,
        bin/**,
        core/tmp/*,
        core/.editorconfig,
        build.properties,
        build.xml,
        *.iml,
        *.launch"
      />
    </copy>

    <!-- Copy base -->
    <copy todir="${release.base.target}">
      <fileset dir="${project.basedir}/base" defaultexcludes="yes" excludes="
        logs/*,
        ssl/*,
        tmp/**,
        vhosts/*"
      />
      <fileset dir="${project.basedir}/base" defaultexcludes="yes" includes="tmp/**">
        <type type="dir"/>
      </fileset>
    </copy>

    <!-- Replacements -->
    <copy file="${project.basedir}/base/bearsampp.conf" tofile="${release.base.target}/bearsampp.conf" overwrite="true">
      <filterset>
        <filter token="APPCONF_LANG" value="${appconf.lang}"/>
        <filter token="APPCONF_TIMEZONE" value="${appconf.timezone}"/>
        <filter token="APPCONF_NOTEPAD" value="${appconf.notepad}"/>
        <filter token="APPCONF_MAX_LOGS_ARCHIVES" value="${appconf.maxLogsArchives}"/>
        <filter token="APPCONF_LOGS_VERBOSE" value="${appconf.logsVerbose}"/>
        <filter token="APPCONF_SCRIPTS_TIMEOUT" value="${appconf.scriptsTimeout}"/>

        <filter token="BIN_APACHE_VERSION" value="${bin.apache.version}"/>
        <filter token="BIN_PHP_VERSION" value="${bin.php.version}"/>
        <filter token="BIN_MYSQL_VERSION" value="${bin.mysql.version}"/>
        <filter token="BIN_MARIADB_VERSION" value="${bin.mariadb.version}"/>
        <filter token="BIN_POSTGRESQL_VERSION" value="${bin.postgresql.version}"/>
        <filter token="BIN_NODEJS_VERSION" value="${bin.nodejs.version}"/>
        <filter token="BIN_FILEZILLA_VERSION" value="${bin.filezilla.version}"/>
        <filter token="BIN_MAILHOG_VERSION" value="${bin.mailhog.version}"/>
        <filter token="BIN_MEMCACHED_VERSION" value="${bin.memcached.version}"/>

        <filter token="TOOL_COMPOSER_VERSION" value="${tool.composer.version}"/>
        <filter token="TOOL_CONSOLEZ_VERSION" value="${tool.consolez.version}"/>
        <filter token="TOOL_GHOSTSCRIPT_VERSION" value="${tool.ghostscript.version}"/>
        <filter token="TOOL_GIT_VERSION" value="${tool.git.version}"/>
        <filter token="TOOL_NGROK_VERSION" value="${tool.ngrok.version}"/>
        <filter token="TOOL_PERL_VERSION" value="${tool.perl.version}"/>
        <filter token="TOOL_PYTHON_VERSION" value="${tool.python.version}"/>
        <filter token="TOOL_RUBY_VERSION" value="${tool.ruby.version}"/>
        <filter token="TOOL_XDC_VERSION" value="${tool.xdc.version}"/>
        <filter token="TOOL_YARN_VERSION" value="${tool.yarn.version}"/>

        <filter token="APP_ADMINER_VERSION" value="${app.adminer.version}"/>
        <filter token="APP_GITLIST_VERSION" value="${app.gitlist.version}"/>
        <filter token="APP_PHPMYADMIN_VERSION" value="${app.phpmyadmin.version}"/>
        <filter token="APP_PHPPGADMIN_VERSION" value="${app.phppgadmin.version}"/>
        <filter token="APP_WEBGRIND_VERSION" value="${app.webgrind.version}"/>
      </filterset>
    </copy>

    <!-- Write version -->
    <copy file="${project.basedir}/base/bearsampp.ini" tofile="${release.base.target}/bearsampp.ini" overwrite="true">
    <filterset>
      <filter token="RELEASE_VERSION" value="${release.fullversion}"/>
    </filterset>
    </copy>
    <echo file="${release.base.target}/core/resources/version.dat" append="false">${release.fullversion}</echo>
    <echo file="${release.tmp.path}/version.dat" append="false">${release.fullversion}</echo>

    <var name="is.base.prepared" value="true"/>
  </target>

  <target name="build-full" depends="init, load.lib, base">
    <var name="release.target" unset="true"/>
    <var name="release.destfile" unset="true"/>
    <property name="release.target" value="${release.tmp.path}/${release.name}-${release.fullversion}"/>
    <property name="release.destfile" value="${build.release.path}/${release.name}-${release.fullversion}"/>

    <echo message="*** Release (full)"/>
    <echo message="* Name    : ${release.name} "/>
    <echo message="* Version : ${release.fullversion} "/>
    <echo message="* Format  : ${release.format} "/>

    <!-- Clean -->
    <delete dir="${release.target}"/>
    <mkdir dir="${build.release.path}"/>
    <mkdir dir="${release.target}"/>

    <!-- Copy base -->
    <copy todir="${release.target}">
      <fileset dir="${release.base.target}" defaultexcludes="yes"/>
      <fileset dir="${release.base.target}" defaultexcludes="yes" includes="tmp/**">
        <type type="dir"/>
      </fileset>
    </copy>

    <!-- Replacements -->
    <copy file="${release.base.target}/bearsampp.conf" tofile="${release.target}/bearsampp.conf" overwrite="true">
      <filterset>
        <filter token="BIN_APACHE_ENABLE" value="1"/>
        <filter token="BIN_PHP_ENABLE" value="1"/>
        <filter token="BIN_MYSQL_ENABLE" value="1"/>
        <filter token="BIN_MARIADB_ENABLE" value="1"/>
        <filter token="BIN_POSTGRESQL_ENABLE" value="1"/>
        <filter token="BIN_NODEJS_ENABLE" value="1"/>
        <filter token="BIN_FILEZILLA_ENABLE" value="1"/>
        <filter token="BIN_MAILHOG_ENABLE" value="1"/>
        <filter token="BIN_MEMCACHED_ENABLE" value="1"/>
      </filterset>
    </copy>

    <!-- Get bins -->
    <getmodule releasesurl="${bin.apache.url}" version="${bin.apache.version}" dest="${release.target}/bin/apache"/>
    <getmodule releasesurl="${bin.filezilla.url}" version="${bin.filezilla.version}" dest="${release.target}/bin/filezilla"/>
    <getmodule releasesurl="${bin.mailhog.url}" version="${bin.mailhog.version}" dest="${release.target}/bin/mailhog"/>
    <getmodule releasesurl="${bin.mariadb.url}" version="${bin.mariadb.version}" dest="${release.target}/bin/mariadb"/>
    <getmodule releasesurl="${bin.postgresql.url}" version="${bin.postgresql.version}" dest="${release.target}/bin/postgresql"/>
    <getmodule releasesurl="${bin.memcached.url}" version="${bin.memcached.version}" dest="${release.target}/bin/memcached"/>
    <getmodule releasesurl="${bin.mysql.url}" version="${bin.mysql.version}" dest="${release.target}/bin/mysql"/>
    <getmodule releasesurl="${bin.nodejs.url}" version="${bin.nodejs.version}" dest="${release.target}/bin/nodejs"/>
    <getmodule releasesurl="${bin.php.url}" version="${bin.php.version}" dest="${release.target}/bin/php"/>

    <!-- Get apps -->
    <getmodule releasesurl="${app.adminer.url}" version="${app.adminer.version}" dest="${release.target}/apps/adminer"/>
    <getmodule releasesurl="${app.gitlist.url}" version="${app.gitlist.version}" dest="${release.target}/apps/gitlist"/>
    <getmodule releasesurl="${app.phpmyadmin.url}" version="${app.phpmyadmin.version}" dest="${release.target}/apps/phpmyadmin"/>
    <getmodule releasesurl="${app.phppgadmin.url}" version="${app.phppgadmin.version}" dest="${release.target}/apps/phppgadmin"/>
    <getmodule releasesurl="${app.webgrind.url}" version="${app.webgrind.version}" dest="${release.target}/apps/webgrind"/>

    <!--  Get tools -->
    <getmodule releasesurl="${tool.composer.url}" version="${tool.composer.version}" dest="${release.target}/tools/composer"/>
    <getmodule releasesurl="${tool.consolez.url}" version="${tool.consolez.version}" dest="${release.target}/tools/consolez"/>
    <getmodule releasesurl="${tool.ghostscript.url}" version="${tool.ghostscript.version}" dest="${release.target}/tools/ghostscript"/>
    <getmodule releasesurl="${tool.git.url}" version="${tool.git.version}" dest="${release.target}/tools/git"/>
    <getmodule releasesurl="${tool.ngrok.url}" version="${tool.ngrok.version}" dest="${release.target}/tools/ngrok"/>
    <getmodule releasesurl="${tool.perl.url}" version="${tool.perl.version}" dest="${release.target}/tools/perl"/>
    <getmodule releasesurl="${tool.python.url}" version="${tool.python.version}" dest="${release.target}/tools/python"/>
    <getmodule releasesurl="${tool.ruby.url}" version="${tool.ruby.version}" dest="${release.target}/tools/ruby"/>
    <getmodule releasesurl="${tool.xdc.url}" version="${tool.xdc.version}" dest="${release.target}/tools/xdc"/>
    <getmodule releasesurl="${tool.yarn.url}" version="${tool.yarn.version}" dest="${release.target}/tools/yarn"/>

    <!-- Compress -->
    <assertdir dir="${release.target}"/>
    <if>
      <equals arg1="${release.format}" arg2="7z"/>
      <then>
        <delete file="${release.destfile}.7z"/>
        <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.7z..."/>
        <sevenzip src="${release.target}/*" dest="${release.destfile}.7z" format="7z"/>
        <hashfile file="${release.destfile}.7z"/>
      </then>
      <elseif>
        <equals arg1="${release.format}" arg2="zip"/>
        <then>
          <delete file="${release.destfile}.zip"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.zip..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.zip" format="zip"/>
          <hashfile file="${release.destfile}.zip"/>
        </then>
      </elseif>
      <elseif>
        <equals arg1="${release.format}" arg2="all"/>
        <then>
          <delete file="${release.destfile}.7z"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.7z..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.7z" format="7z"/>
          <hashfile file="${release.destfile}.7z"/>

          <delete file="${release.destfile}.zip"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.zip..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.zip" format="zip"/>
          <hashfile file="${release.destfile}.zip"/>
        </then>
      </elseif>
      <else>
        <fail message="Unknown release format: ${release.format}"/>
      </else>
    </if>
  </target>

  <target name="build-basic" depends="init, load.lib, base">
    <var name="release.target" unset="true"/>
    <var name="release.destfile" unset="true"/>
    <property name="release.target" value="${release.tmp.path}/${release.name}-basic-${release.fullversion}"/>
    <property name="release.destfile" value="${build.release.path}/${release.name}-basic-${release.fullversion}"/>

    <echo message="*** Release (basic)"/>
    <echo message="* Name    : ${release.name} "/>
    <echo message="* Version : ${release.fullversion} "/>
    <echo message="* Format  : ${release.format} "/>

    <!-- Clean -->
    <delete dir="${release.target}"/>
    <mkdir dir="${build.release.path}"/>
    <mkdir dir="${release.target}"/>

    <!-- Copy base -->
    <copy todir="${release.target}">
      <fileset dir="${release.base.target}" defaultexcludes="yes"/>
      <fileset dir="${release.base.target}" defaultexcludes="yes" includes="tmp/**">
        <type type="dir"/>
      </fileset>
    </copy>

    <!-- Replacements -->
    <copy file="${release.base.target}/bearsampp.conf" tofile="${release.target}/bearsampp.conf" overwrite="true">
      <filterset>
        <filter token="BIN_APACHE_ENABLE" value="1"/>
        <filter token="BIN_PHP_ENABLE" value="1"/>
        <filter token="BIN_MYSQL_ENABLE" value="1"/>
        <filter token="BIN_MARIADB_ENABLE" value="1"/>
        <filter token="BIN_POSTGRESQL_ENABLE" value="0"/>
        <filter token="BIN_NODEJS_ENABLE" value="1"/>
        <filter token="BIN_FILEZILLA_ENABLE" value="0"/>
        <filter token="BIN_MAILHOG_ENABLE" value="1"/>
        <filter token="BIN_MEMCACHED_ENABLE" value="0"/>
      </filterset>
    </copy>

    <!-- Get bins -->
    <getmodule releasesurl="${bin.apache.url}" version="${bin.apache.version}" dest="${release.target}/bin/apache"/>
    <!--getmodule releasesurl="${bin.filezilla.url}" version="${bin.filezilla.version}" dest="${release.target}/bin/filezilla"/-->
    <getmodule releasesurl="${bin.mailhog.url}" version="${bin.mailhog.version}" dest="${release.target}/bin/mailhog"/>
    <getmodule releasesurl="${bin.mariadb.url}" version="${bin.mariadb.version}" dest="${release.target}/bin/mariadb"/>
    <!--getmodule releasesurl="${bin.postgresql.url}" version="${bin.postgresql.version}" dest="${release.target}/bin/postgresql"/-->
    <!--getmodule releasesurl="${bin.memcached.url}" version="${bin.memcached.version}" dest="${release.target}/bin/memcached"/-->
    <getmodule releasesurl="${bin.mysql.url}" version="${bin.mysql.version}" dest="${release.target}/bin/mysql"/>
    <getmodule releasesurl="${bin.nodejs.url}" version="${bin.nodejs.version}" dest="${release.target}/bin/nodejs"/>
    <getmodule releasesurl="${bin.php.url}" version="${bin.php.version}" dest="${release.target}/bin/php"/>

    <!--Get apps -->
    <getmodule releasesurl="${app.adminer.url}" version="${app.adminer.version}" dest="${release.target}/apps/adminer"/>
    <getmodule releasesurl="${app.gitlist.url}" version="${app.gitlist.version}" dest="${release.target}/apps/gitlist"/>
    <getmodule releasesurl="${app.phpmyadmin.url}" version="${app.phpmyadmin.version}" dest="${release.target}/apps/phpmyadmin"/>
    <!-- <getmodule releasesurl="${app.phppgadmin.url}" version="${app.phppgadmin.version}" dest="${release.target}/apps/phppgadmin"/ -->
    <getmodule releasesurl="${app.webgrind.url}" version="${app.webgrind.version}" dest="${release.target}/apps/webgrind"/>

    <!-- Get tools -->
    <getmodule releasesurl="${tool.composer.url}" version="${tool.composer.version}" dest="${release.target}/tools/composer"/>
    <getmodule releasesurl="${tool.consolez.url}" version="${tool.consolez.version}" dest="${release.target}/tools/consolez"/>
   <!-- <getmodule releasesurl="${tool.ghostscript.url}" version="${tool.ghostscript.version}" dest="${release.target}/tools/ghostscript"/ -->
    <getmodule releasesurl="${tool.git.url}" version="${tool.git.version}" dest="${release.target}/tools/git"/>
    <getmodule releasesurl="${tool.ngrok.url}" version="${tool.ngrok.version}" dest="${release.target}/tools/ngrok"/>
    <getmodule releasesurl="${tool.perl.url}" version="${tool.perl.version}" dest="${release.target}/tools/perl"/>
    <!--getmodule releasesurl="${tool.python.url}" version="${tool.python.version}" dest="${release.target}/tools/python"/-->
    <!--getmodule releasesurl="${tool.ruby.url}" version="${tool.ruby.version}" dest="${release.target}/tools/ruby"/-->
    <getmodule releasesurl="${tool.xdc.url}" version="${tool.xdc.version}" dest="${release.target}/tools/xdc"/>
    <!--getmodule releasesurl="${tool.yarn.url}" version="${tool.yarn.version}" dest="${release.target}/tools/yarn"/-->

    <!-- Compress -->
    <assertdir dir="${release.target}"/>
    <if>
      <equals arg1="${release.format}" arg2="7z"/>
      <then>
        <delete file="${release.destfile}.7z"/>
        <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.7z..."/>
        <sevenzip src="${release.target}/*" dest="${release.destfile}.7z" format="7z"/>
        <hashfile file="${release.destfile}.7z"/>
      </then>
      <elseif>
        <equals arg1="${release.format}" arg2="zip"/>
        <then>
          <delete file="${release.destfile}.zip"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.zip..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.zip" format="zip"/>
          <hashfile file="${release.destfile}.zip"/>
        </then>
      </elseif>
      <elseif>
        <equals arg1="${release.format}" arg2="all"/>
        <then>
          <delete file="${release.destfile}.7z"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.7z..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.7z" format="7z"/>
          <hashfile file="${release.destfile}.7z"/>

          <delete file="${release.destfile}.zip"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.zip..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.zip" format="zip"/>
          <hashfile file="${release.destfile}.zip"/>
        </then>
      </elseif>
      <else>
        <fail message="Unknown release format: ${release.format}"/>
      </else>
    </if>
  </target>

  <target name="build-lite" depends="init, load.lib, base">
    <var name="release.target" unset="true"/>
    <var name="release.destfile" unset="true"/>
    <property name="release.target" value="${release.tmp.path}/${release.name}-lite-${release.fullversion}"/>
    <property name="release.destfile" value="${build.release.path}/${release.name}-lite-${release.fullversion}"/>

    <echo message="*** Release (lite)"/>
    <echo message="* Name    : ${release.name} "/>
    <echo message="* Version : ${release.fullversion} "/>
    <echo message="* Format  : ${release.format} "/>

    <!-- Clean -->
    <delete dir="${release.target}"/>
    <mkdir dir="${build.release.path}"/>
    <mkdir dir="${release.target}"/>

    <!-- Copy base -->
    <copy todir="${release.target}">
      <fileset dir="${release.base.target}" defaultexcludes="yes"/>
      <fileset dir="${release.base.target}" defaultexcludes="yes" includes="tmp/**">
        <type type="dir"/>
      </fileset>
    </copy>

    <!-- Replacements -->
    <copy file="${release.base.target}/bearsampp.conf" tofile="${release.target}/bearsampp.conf" overwrite="true">
      <filterset>
        <filter token="BIN_APACHE_ENABLE" value="1"/>
        <filter token="BIN_PHP_ENABLE" value="1"/>
        <filter token="BIN_MYSQL_ENABLE" value="1"/>
        <filter token="BIN_MARIADB_ENABLE" value="0"/>
        <filter token="BIN_POSTGRESQL_ENABLE" value="0"/>
        <filter token="BIN_NODEJS_ENABLE" value="0"/>
        <filter token="BIN_FILEZILLA_ENABLE" value="0"/>
        <filter token="BIN_MAILHOG_ENABLE" value="1"/>
        <filter token="BIN_MEMCACHED_ENABLE" value="0"/>
      </filterset>
    </copy>

    <!-- Get bins -->
    <getmodule releasesurl="${bin.apache.url}" version="${bin.apache.version}" dest="${release.target}/bin/apache"/>
    <!--getmodule releasesurl="${bin.filezilla.url}" version="${bin.filezilla.version}" dest="${release.target}/bin/filezilla"/-->
    <getmodule releasesurl="${bin.mailhog.url}" version="${bin.mailhog.version}" dest="${release.target}/bin/mailhog"/>
    <!--getmodule releasesurl="${bin.mariadb.url}" version="${bin.mariadb.version}" dest="${release.target}/bin/mariadb"/ -->
    <!--getmodule releasesurl="${bin.postgresql.url}" version="${bin.postgresql.version}" dest="${release.target}/bin/postgresql"/-->
    <!--getmodule releasesurl="${bin.memcached.url}" version="${bin.memcached.version}" dest="${release.target}/bin/memcached"/-->
    <getmodule releasesurl="${bin.mysql.url}" version="${bin.mysql.version}" dest="${release.target}/bin/mysql"/>
    <getmodule releasesurl="${bin.nodejs.url}" version="${bin.nodejs.version}" dest="${release.target}/bin/nodejs"/>
    <getmodule releasesurl="${bin.php.url}" version="${bin.php.version}" dest="${release.target}/bin/php"/>

    <!--Get apps -->
    <getmodule releasesurl="${app.adminer.url}" version="${app.adminer.version}" dest="${release.target}/apps/adminer"/>
    <!-- <getmodule releasesurl="${app.gitlist.url}" version="${app.gitlist.version}" dest="${release.target}/apps/gitlist"/ -->
    <getmodule releasesurl="${app.phpmyadmin.url}" version="${app.phpmyadmin.version}" dest="${release.target}/apps/phpmyadmin"/>
    <!-- <getmodule releasesurl="${app.phppgadmin.url}" version="${app.phppgadmin.version}" dest="${release.target}/apps/phppgadmin"/ -->
    <getmodule releasesurl="${app.webgrind.url}" version="${app.webgrind.version}" dest="${release.target}/apps/webgrind"/>

    <!-- Get tools -->
    <getmodule releasesurl="${tool.composer.url}" version="${tool.composer.version}" dest="${release.target}/tools/composer"/>
    <getmodule releasesurl="${tool.consolez.url}" version="${tool.consolez.version}" dest="${release.target}/tools/consolez"/>
    <!--getmodule releasesurl="${tool.ghostscript.url}" version="${tool.ghostscript.version}" dest="${release.target}/tools/ghostscript"/-->
    <!--getmodule releasesurl="${tool.git.url}" version="${tool.git.version}" dest="${release.target}/tools/git"/-->
    <!--getmodule releasesurl="${tool.ngrok.url}" version="${tool.ngrok.version}" dest="${release.target}/tools/ngrok"/-->
    <!--getmodule releasesurl="${tool.perl.url}" version="${tool.perl.version}" dest="${release.target}/tools/perl"/-->
    <!--getmodule releasesurl="${tool.python.url}" version="${tool.python.version}" dest="${release.target}/tools/python"/-->
    <!--getmodule releasesurl="${tool.ruby.url}" version="${tool.ruby.version}" dest="${release.target}/tools/ruby"/-->
    <!--getmodule releasesurl="${tool.xdc.url}" version="${tool.xdc.version}" dest="${release.target}/tools/xdc"/-->
    <!--getmodule releasesurl="${tool.yarn.url}" version="${tool.yarn.version}" dest="${release.target}/tools/yarn"/-->

    <!-- Compress -->
    <assertdir dir="${release.target}"/>
    <if>
      <equals arg1="${release.format}" arg2="7z"/>
      <then>
        <delete file="${release.destfile}.7z"/>
        <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.7z..."/>
        <sevenzip src="${release.target}/*" dest="${release.destfile}.7z" format="7z"/>
        <hashfile file="${release.destfile}.7z"/>
      </then>
      <elseif>
        <equals arg1="${release.format}" arg2="zip"/>
        <then>
          <delete file="${release.destfile}.zip"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.zip..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.zip" format="zip"/>
          <hashfile file="${release.destfile}.zip"/>
        </then>
      </elseif>
      <elseif>
        <equals arg1="${release.format}" arg2="all"/>
        <then>
          <delete file="${release.destfile}.7z"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.7z..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.7z" format="7z"/>
          <hashfile file="${release.destfile}.7z"/>

          <delete file="${release.destfile}.zip"/>
          <echo message="Compressing ${release.name}${release.fullversion} to ${release.destfile}.zip..."/>
          <sevenzip src="${release.target}/*" dest="${release.destfile}.zip" format="zip"/>
          <hashfile file="${release.destfile}.zip"/>
        </then>
      </elseif>
      <else>
        <fail message="Unknown release format: ${release.format}"/>
      </else>
    </if>
  </target>

  <target name="launch" depends="build-full" description="Launch Bearsampp">
    <assertdir dir="${release.target}"/>
    <property name="build.launch.path" value="${build.path}/launch"/>

    <delete dir="${build.launch.path}"/>
    <mkdir dir="${build.launch.path}"/>
    <move todir="${build.launch.path}">
      <fileset dir="${release.target}/bearsampp">
        <include name="**"/>
      </fileset>
    </move>

    <echo message="Executing Bearsampp. Please wait..."/>
    <exec executable="${build.launch.path}/bearsampp.exe"/>
    <echo message="If the application needs to restart, you can execute Bearsampp.exe in : ${build.launch.path}"/>
  </target>
</project>
